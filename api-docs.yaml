openapi: 3.0.0
info:
  title: DoorStep Campus Food Delivery API
  description: API for a campus food delivery platform supporting vendors, steppers, and customers.
  version: 1.0.0
servers:
  - url: https://<your-domain>/api
    description: Production server
  - url: http://localhost:3000/api
    description: Local development server
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        email: { type: string }
        name: { type: string }
        phone: { type: string }
        role: { type: string, enum: [vendor, stepper, customer] }
    Vendor:
      type: object
      properties:
        id: { type: string }
        shopName: { type: string }
        logo: { type: string }
        location: { type: object, properties: { lat: { type: number }, lng: { type: number } } }
        hours: { type: object, properties: { open: { type: string }, close: { type: string } } }
    Product:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        price: { type: number }
        description: { type: string }
        photo: { type: string }
        available: { type: boolean }
    Order:
      type: object
      properties:
        id: { type: string }
        customerId: { type: string }
        vendorId: { type: string }
        stepperId: { type: string }
        items: { type: array, items: { $ref: '#/components/schemas/Product' } }
        status: { type: string, enum: [placed, accepted, out_for_delivery, delivered] }
        total: { type: number }
    Rating:
      type: object
      properties:
        rating: { type: number, minimum: 1, maximum: 5 }
        feedback: { type: string }
    Wallet:
      type: object
      properties:
        balance: { type: number }
        commissionHistory: { type: array, items: { type: object } }
        depositGrowth: { type: number }
paths:
  /auth/signup:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
                role: { type: string, enum: [vendor, stepper, customer] }
                name: { type: string }
                phone: { type: string }
      responses:
        '200': { description: JWT token, content: { application/json: { schema: { type: object, properties: { token: { type: string } } } } } }
        '400': { description: Validation error }
  /auth/login:
    post:
      summary: Authenticate user and return JWT token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200': { description: JWT token, content: { application/json: { schema: { type: object, properties: { token: { type: string } } } } } }
        '401': { description: Invalid credentials }
  /auth/otp:
    post:
      summary: Send OTP for email/phone verification
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
      responses:
        '200': { description: Success }
        '400': { description: Invalid email }
  /auth/verify-otp:
    post:
      summary: Verify OTP for user authentication
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                otp: { type: string }
      responses:
        '200': { description: JWT token, content: { application/json: { schema: { type: object, properties: { token: { type: string } } } } } }
        '400': { description: Invalid OTP }
  /auth/profile:
    get:
      summary: Fetch authenticated userâ€™s profile
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '200': { description: Profile data, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '401': { description: Unauthorized }
    put:
      summary: Update user profile
      tags: [Authentication]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                phone: { type: string }
                hall: { type: string }
      responses:
        '200': { description: Updated profile, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '401': { description: Unauthorized }
  /auth/logout:
    post:
      summary: Invalidate user session
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '200': { description: Success }
        '401': { description: Unauthorized }
  /vendor/register:
    post:
      summary: Register vendor with shop details
      tags: [Vendor]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                shopName: { type: string }
                logo: { type: string, format: binary }
                location: { type: object, properties: { lat: { type: number }, lng: { type: number } } }
                hours: { type: object, properties: { open: { type: string }, close: { type: string } } }
      responses:
        '201': { description: Vendor created, content: { application/json: { schema: { $ref: '#/components/schemas/Vendor' } } } }
        '401': { description: Unauthorized }
  /vendor/profile:
    put:
      summary: Update vendor profile
      tags: [Vendor]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                shopName: { type: string }
                logo: { type: string, format: binary }
                location: { type: object, properties: { lat: { type: number }, lng: { type: number } } }
                hours: { type: object, properties: { open: { type: string }, close: { type: string } } }
      responses:
        '200': { description: Updated vendor profile, content: { application/json: { schema: { $ref: '#/components/schemas/Vendor' } } } }
        '401': { description: Unauthorized }
  /vendor/profile/{id}:
    get:
      summary: Fetch vendor profile by ID
      tags: [Vendor]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Vendor profile, content: { application/json: { schema: { $ref: '#/components/schemas/Vendor' } } } }
        '404': { description: Vendor not found }
  /vendor/products:
    post:
      summary: Add new product
      tags: [Vendor]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name: { type: string }
                price: { type: number }
                description: { type: string }
                photo: { type: string, format: binary }
                available: { type: boolean }
      responses:
        '201': { description: Product created, content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } } }
        '401': { description: Unauthorized }
    get:
      summary: List all products for a vendor
      tags: [Vendor]
      security:
        - BearerAuth: []
      responses:
        '200': { description: List of products, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Product' } } } } }
        '401': { description: Unauthorized }
  /vendor/products/{id}:
    put:
      summary: Update product details
      tags: [Vendor]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name: { type: string }
                price: { type: number }
                description: { type: string }
                photo: { type: string, format: binary }
                available: { type: boolean }
      responses:
        '200': { description: Updated product, content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } } }
        '401': { description: Unauthorized }
        '404': { description: Product not found }
    delete:
      summary: Delete a product
      tags: [Vendor]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Product deleted }
        '401': { description: Unauthorized }
        '404': { description: Product not found }
  /vendor/orders:
    get:
      summary: List incoming orders for the vendor
      tags: [Vendor]
      security:
        - BearerAuth: []
      responses:
        '200': { description: List of orders, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Order' } } } } }
        '401': { description: Unauthorized }
  /vendor/orders/{id}/status:
    put:
      summary: Update order status
      tags: [Vendor]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string, enum: [pending, preparing, ready, completed] }
      responses:
        '200': { description: Updated order, content: { application/json: { schema: { $ref: '#/components/schemas/Order' } } } }
        '401': { description: Unauthorized }
        '404': { description: Order not found }
  /vendor/analytics/sales:
    get:
      summary: Fetch daily/weekly sales reports
      tags: [Vendor]
      security:
        - BearerAuth: []
      responses:
        '200': { description: Sales report, content: { application/json: { schema: { type: object } } } }
        '401': { description: Unauthorized }
  /vendor/analytics/products:
    get:
      summary: Fetch product performance data
      tags: [Vendor]
      security:
        - BearerAuth: []
      responses:
        '200': { description: Product performance data, content: { application/json: { schema: { type: object } } } }
        '401': { description: Unauthorized }
  /stepper/register:
    post:
      summary: Register stepper with student ID and verification form
      tags: [Stepper]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                studentId: { type: string, format: binary }
                verificationForm: { type: string, format: binary }
      responses:
        '201': { description: Stepper created, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '401': { description: Unauthorized }
  /stepper/deposit:
    post:
      summary: Process security deposit
      tags: [Stepper]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount: { type: number, example: 1000 }
      responses:
        '200': { description: Deposit processed }
        '401': { description: Unauthorized }
  /stepper/profile:
    put:
      summary: Update stepper profile
      tags: [Stepper]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                picture: { type: string, format: binary }
                phone: { type: string }
      responses:
        '200': { description: Updated profile, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '401': { description: Unauthorized }
  /stepper/profile/{id}:
    get:
      summary: Fetch stepper profile by ID
      tags: [Stepper]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Stepper profile, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '404': { description: Stepper not found }
  /stepper/orders/available:
    get:
      summary: List nearby orders based on geolocation
      tags: [Stepper]
      security:
        - BearerAuth: []
      responses:
        '200': { description: List of orders, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Order' } } } } }
        '401': { description: Unauthorized }
  /stepper/orders/{id}/accept:
    post:
      summary: Accept an order
      tags: [Stepper]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Order accepted }
        '401': { description: Unauthorized }
        '404': { description: Order not found }
  /stepper/orders/{id}/reject:
    post:
      summary: Reject an order
      tags: [Stepper]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Order rejected }
        '401': { description: Unauthorized }
        '404': { description: Order not found }
  /stepper/wallet:
    get:
      summary: Fetch wallet balance, commission history, and deposit growth
      tags: [Stepper]
      security:
        - BearerAuth: []
      responses:
        '200': { description: Wallet details, content: { application/json: { schema: { $ref: '#/components/schemas/Wallet' } } } }
        '401': { description: Unauthorized }
  /stepper/wallet/withdraw:
    post:
      summary: Request commission withdrawal
      tags: [Stepper]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount: { type: number }
                twoFactorCode: { type: string }
      responses:
        '200': { description: Withdrawal requested }
        '401': { description: Unauthorized }
  /customer/register:
    post:
      summary: Register customer with basic details
      tags: [Customer]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                hall: { type: string }
                phone: { type: string }
      responses:
        '201': { description: Customer created, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '401': { description: Unauthorized }
  /customer/profile:
    put:
      summary: Update customer profile
      tags: [Customer]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                hall: { type: string }
                phone: { type: string }
      responses:
        '200': { description: Updated profile, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '401': { description: Unauthorized }
  /customer/profile/{id}:
    get:
      summary: Fetch customer profile by ID
      tags: [Customer]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Customer profile, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '404': { description: Customer not found }
  /customer/vendors:
    get:
      summary: List vendors by category, location, or name
      tags: [Customer]
      parameters:
        - name: category
          in: query
          schema: { type: string }
        - name: location
          in: query
          schema: { type: string }
        - name: name
          in: query
          schema: { type: string }
      responses:
        '200': { description: List of vendors, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Vendor' } } } } }
  /customer/vendors/{id}/products:
    get:
      summary: Fetch products for a specific vendor
      tags: [Customer]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: List of products, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Product' } } } } }
        '404': { description: Vendor not found }
  /customer/cart:
    post:
      summary: Add items to cart
      tags: [Customer]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId: { type: string }
                quantity: { type: number }
      responses:
        '200': { description: Item added to cart }
        '401': { description: Unauthorized }
    put:
      summary: Update cart items
      tags: [Customer]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId: { type: string }
                quantity: { type: number }
      responses:
        '200': { description: Cart updated }
        '401': { description: Unauthorized }
    delete:
      summary: Clear cart
      tags: [Customer]
      security:
        - BearerAuth: []
      responses:
        '200': { description: Cart cleared }
        '401': { description: Unauthorized }
  /customer/orders:
    post:
      summary: Place an order with checkout
      tags: [Customer]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items: { type: array, items: { type: object, properties: { productId: { type: string }, quantity: { type: number } } } }
                paymentDetails: { type: object }
      responses:
        '201': { description: Order created, content: { application/json: { schema: { $ref: '#/components/schemas/Order' } } } }
        '401': { description: Unauthorized }
    get:
      summary: List customerâ€™s order history
      tags: [Customer]
      security:
        - BearerAuth: []
      responses:
        '200': { description: List of orders, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Order' } } } } }
        '401': { description: Unauthorized }
  /customer/orders/{id}:
    get:
      summary: Track order status
      tags: [Customer]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Order details, content: { application/json: { schema: { $ref: '#/components/schemas/Order' } } } }
        '404': { description: Order not found }
  /customer/orders/{id}/rate:
    post:
      summary: Submit ratings and feedback
      tags: [Customer]
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vendorRating: { $ref: '#/components/schemas/Rating' }
                stepperRating: { $ref: '#/components/schemas/Rating' }
      responses:
        '200': { description: Rating submitted }
        '401': { description: Unauthorized }
        '404': { description: Order not found }
  /geolocation/stepper:
    post:
      summary: Update stepperâ€™s current location
      tags: [Geolocation]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                location: { type: object, properties: { lat: { type: number }, lng: { type: number } } }
      responses:
        '200': { description: Location updated }
        '401': { description: Unauthorized }
  /geolocation/orders/nearby:
    get:
      summary: Fetch nearby orders for steppers
      tags: [Geolocation]
      security:
        - BearerAuth: []
      responses:
        '200': { description: List of orders, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Order' } } } } }
        '401': { description: Unauthorized }
  /geolocation/track/{orderId}:
    get:
      summary: Track delivery location for active orders
      tags: [Geolocation]
      parameters:
        - name: orderId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Location data, content: { application/json: { schema: { type: object, properties: { lat: { type: number }, lng: { type: number } } } } } }
        '401': { description: Unauthorized }
        '404': { description: Order not found }
  /payments/deposit:
    post:
      summary: Process stepperâ€™s security deposit
      tags: [Payments]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount: { type: number }
                paymentDetails: { type: object }
      responses:
        '200': { description: Deposit processed }
        '401': { description: Unauthorized }
  /payments/order:
    post:
      summary: Process customer payment for order
      tags: [Payments]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId: { type: string }
                paymentDetails: { type: object }
      responses:
        '200': { description: Payment processed }
        '401': { description: Unauthorized }
  /payments/withdrawal:
    post:
      summary: Process stepper withdrawal request
      tags: [Payments]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount: { type: number }
                twoFactorCode: { type: string }
      responses:
        '200': { description: Withdrawal requested }
        '401': { description: Unauthorized }
  /payments/deposit/growth:
    get:
      summary: Fetch mutual fund investment growth for steppers
      tags: [Payments]
      security:
        - BearerAuth: []
      responses:
        '200': { description: Deposit growth, content: { application/json: { schema: { type: object, properties: { growth: { type: number } } } } } }
        '401': { description: Unauthorized }
  /notifications/push:
    post:
      summary: Send push notifications
      tags: [Notifications]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: string }
                message: { type: string }
      responses:
        '200': { description: Notification sent }
        '401': { description: Unauthorized }